version: '3.5'
services:
  location:
    build:
      context: .
      dockerfile: services/location/Dockerfile
    ports:
      - "50051:50051"
    environment:
      DATABASE_URL: postgres://postgres:postgres@host.docker.internal/locations
      GOOGLE_API_GEOCODE_URL: https://maps.googleapis.com/maps/api/geocode/json
      GOOGLE_API_KEY: api_key
      AWS_DEFAULT_REGION: eu-north-1
      AWS_ACCESS_KEY_ID: key_id
      AWS_SECRET_ACCESS_KEY: secret_key
      AWS_QUEUE_URL: queue_url
      JWT_SECRET_KEY: secret_key
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - neptune-network

  users:
    build:
      context: .
      dockerfile: services/users/Dockerfile
    ports:
      - "50050:50050"
    environment:
      DATABASE_URL: postgres://postgres:postgres@host.docker.internal/users
      JWT_SECRET_KEY: "secret_key"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - neptune-network

  context:
    build:
      context: .
      dockerfile: services/context/Dockerfile
    ports:
      - "50052:50052"
    environment:
      REDIS_URL: redis://:eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81@host.docker.internal:6379/
      LOCATION_SERVICE_GRPC_URL: http://host.docker.internal:50051
      WEATHERAPI_URL: http://api.weatherapi.com
      WEATHERAPI_KEY: api_key
      JWT_SECRET_KEY: secret_key
      JWT_S2S_SECRET_KEY: s2s_secret_key
    depends_on:
      cache:
        condition: service_healthy
      location:
        condition: service_started
    networks:
      - neptune-network

  search:
    build:
      context: .
      dockerfile: services/search/Dockerfile
    ports:
      - "50053:50053"
    environment:
      MONGO_CONN_STR: mongodb://user:pass@mongodb/admin?authSource=admin
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - neptune-network

  reco:
    build:
      context: .
      dockerfile: services/reco/Dockerfile
    ports:
      - "50054:50054"
    environment:
      MOVIE_RECO_URL: http://host.docker.internal:5001
      TFIDF: 0.04
      COSINE: 0.1
      ACCURACY: 0.6
      FAV_SERVICE_GRPC_URL: http://host.docker.internal:50050
      CONTEXT_SERVICE_GRPC_URL: http://host.docker.internal:50052
      MONGO_CONN_STR: mongodb://user:pass@mongodb/admin?authSource=admin
      DATABASE_URL: postgres://postgres:postgres@host.docker.internal/reco
    depends_on:
      users:
        condition: service_started
      context:
        condition: service_started
    networks:
      - neptune-network

  gateway:
    build:
      context: .
      dockerfile: services/gateway/Dockerfile
    ports:
      - "8080:8080"
    environment:
      USER_SERVICE_GRPC_URL: http://host.docker.internal:50050
      LOCATION_SERVICE_GRPC_URL: http://host.docker.internal:50051
      CONTEXT_SERVICE_GRPC_URL: http://host.docker.internal:50052
      SEARCH_SERVICE_GRPC_URL: http://host.docker.internal:50053
      RECO_SERVICE_GRPC_URL: http://host.docker.internal:50054
      JWT_SECRET_KEY: secret_key
    depends_on:
      location:
        condition: service_started
      users:
        condition: service_started
      context:
        condition: service_started
      search:
        condition: service_started
      reco:
        condition: service_started
    networks:
      - neptune-network

  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_HOST: localhost
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: locations,users,reco
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1s
      timeout: 5s
      retries: 10
    ports:
      - 5432:5432
    volumes:
      - ./config:/docker-entrypoint-initdb.d
    networks:
      - neptune-network

  mongodb:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pass
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db
    networks:
      - neptune-network

  cache:
    image: redis:latest
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - cache:/data
    networks:
      - neptune-network

networks:
  neptune-network:
    driver: bridge

volumes:
  cache:
    driver: local
  mongodb_data_container:
